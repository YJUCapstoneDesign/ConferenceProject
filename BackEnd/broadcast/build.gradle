plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.2'
    id 'io.spring.dependency-management' version '1.1.4'
}

group = 'team'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    // webclient 테스트를 위한 MockWeb 서버
    testImplementation 'com.squareup.okhttp3:mockwebserver'
    // websocket 의존성 추가
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // webflux
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    // json 형태 데이터를 보내기 위한 Gson 라이브러리
    implementation 'com.google.code.gson:gson:2.10.1'
    // jwt 관련 라이브러리 추가
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
    // mysql 데이터베이스 라이브러리
    runtimeOnly 'com.mysql:mysql-connector-j'
    // mongodb 데이터베이스 라이브러리
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
    // 랜덤한 문자열을 생성하는 라이브러리
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
}

tasks.named('test') {
    useJUnitPlatform()
}
